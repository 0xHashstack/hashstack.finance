{"version":3,"sources":["components/layout/Header.tsx"],"names":["toast","configure","autoClose","Header","useState","get_token","setGet_token","isTransactionDone","setIsTransactionDone","currentProcessingToken","setCurrentProcessingToken","useContext","Web3ModalContext","connect","disconnect","account","wrapper","Web3WrapperContext","web3Wrapper","handleConnectWallet","useCallback","handleDisconnectWallet","handleGetToken","event","a","tokenName","target","textContent","getFaucetInstance","getTokens","tx1","wait","tx","onSuccessCallback","events","error","GetErrorText","position","POSITION","BOTTOM_RIGHT","closeOnClick","data","_amount","forEach","e","args","amount","toBigInt","BNtoNum","success","tog_token","document","body","classList","add","Fragment","id","className","style","paddingRight","to","src","width","height","marginRight","color","fontSize","fontWeight","outline","float","disabled","onClick","isOpen","toggle","centered","textAlign","sm","window","open"],"mappings":"sOASAA,IAAMC,UAAU,CAAEC,UAAW,MAiNdC,UA9MA,WACb,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkDF,oBAAS,GAA3D,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAA4DJ,mBAAS,MAArE,mBAAOK,EAAP,KAA+BC,EAA/B,KAEA,EAAyCC,qBAAWC,KAA5CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,QACRC,EAAYL,qBAAWM,KAApCC,YAIFC,EAAsBC,uBAAY,WACtCP,MACC,CAACA,IAEEQ,EAAyBD,uBAAY,WACzCN,MACC,CAACA,IAhBe,SAkBJQ,EAlBI,8EAkBnB,WAA+BC,GAA/B,mBAAAC,EAAA,sEAEIhB,GAAqB,GACfiB,EAAYF,EAAMG,OAAOC,YAC/BjB,EAA0Ba,EAAMG,OAAOC,aAJ3C,gBAKsBX,QALtB,IAKsBA,OALtB,EAKsBA,EAASY,oBAAoBC,UAAUJ,GAL7D,cAKUK,EALV,gBAMqBA,EAAIC,OANzB,OAMUC,EANV,OAOIC,EAAkBD,EAAGE,OAAQT,GAPjC,kDASIjB,GAAqB,GACrBE,EAA0B,MAC1BV,IAAMmC,MAAN,UAAeC,YAAa,EAAD,KAAW,CAAEC,SAAUrC,IAAMsC,SAASC,aAAcC,cAAc,IAXjG,2DAlBmB,sBAmCnB,IAAMP,EAAoB,SAACQ,EAAMhB,GAG/B,IAAIiB,EAFJlC,GAAqB,GACrBE,EAA0B,MAE1B+B,EAAKE,SAAQ,SAAAC,GACI,gBAAXA,EAAErB,QACJmB,EAAUE,EAAEC,KAAKC,OAAOC,eAG5B,IAAMD,EAASE,YAAQN,EAAS,GAChC1C,IAAMiD,QAAN,UAAiBH,EAAjB,YAA2BrB,EAA3B,kCAAsE,CAAEY,SAAUrC,IAAMsC,SAASC,aAAcC,cAAc,KAO/H,SAASU,IACP5C,GAAcD,GAJd8C,SAASC,KAAKC,UAAUC,IAAI,cAQ9B,OACE,cAAC,IAAMC,SAAP,UACE,wBAAQC,GAAG,cAAX,SACE,sBAAKC,UAAU,gBAAgBC,MAAO,CAACC,aAAc,MAArD,UACE,qBAAKF,UAAU,SAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,eAAC,IAAD,CAAMG,GAAG,GAAGH,UAAU,iBAAtB,UACE,qBAAKI,IAAI,uBAAuBH,MAAO,CAAEI,MAAO,OAAQC,OAAQ,OAAQC,YAAa,YACrF,sBAAMP,UAAU,UAAhB,SACE,wBAAQC,MAAO,CAAEO,MAAO,QAASC,SAAU,OAAQC,WAAY,OAA/D,yBAEF,sBAAMV,UAAU,UAAhB,SACE,wBAAQC,MAAO,CAAEO,MAAO,QAASC,SAAU,OAAQC,WAAY,OAA/D,4BAIJ,eAAC,IAAD,CAAMP,GAAG,GAAGH,UAAU,kBAAtB,UACE,qBAAKI,IAAI,uBAAuBH,MAAO,CAAEI,MAAO,OAAQC,OAAQ,OAAQC,YAAa,YACrF,sBAAMP,UAAU,UAAhB,SACE,wBAAQC,MAAO,CAAEO,MAAO,QAASC,SAAU,OAAQC,WAAY,OAA/D,yBAEF,sBAAMV,UAAU,UAAhB,SACE,wBAAQC,MAAO,CAAEO,MAAO,QAASC,SAAU,OAAQC,WAAY,OAA/D,iCAOR,sBAAKV,UAAU,yBAAf,UACE,cAAC,IAAD,CACEQ,MAAM,QACNG,SAAO,EACPX,UAAU,cACVC,MAAO,CAAEW,MAAO,SAChBC,SAAsB,OAAZvD,EACVwD,QAAS,WACPrB,KAPJ,wBAYA,cAAC,IAAD,CACEsB,OAAQnE,EACRoE,OAAQ,WACNvB,KAEFwB,UAAQ,EALV,SAOE,qBAAKjB,UAAU,aAAf,SACE,eAAC,IAAD,WACE,oBAAIC,MAAO,CAAEiB,UAAW,UAAxB,uBACA,uBACA,sBAAKlB,UAAU,WAAf,UACE,cAAC,IAAD,CAAKmB,GAAI,EAAT,SACE,cAAC,IAAD,CACEnB,UAAU,mBACVQ,MAAM,QACNG,SAAO,EACPG,QAASjD,EAJX,SAMGf,GAAgD,QAA3BE,EAAmC,cAAC,IAAD,yBAAgC,UAG7F,cAAC,IAAD,CAAKmE,GAAI,EAAT,SACE,cAAC,IAAD,CACEX,MAAM,QACNR,UAAU,mBACVW,SAAO,EACPG,QAASjD,EAJX,SAMGf,GAAgD,QAA3BE,EAAmC,cAAC,IAAD,yBAAgC,UAG7F,cAAC,IAAD,CAAKmE,GAAI,EAAT,SACE,cAAC,IAAD,CACEX,MAAM,QACNR,UAAU,mBACVW,SAAO,EACPG,QAASjD,EAJX,SAMGf,GAAgD,SAA3BE,EAAoC,cAAC,IAAD,yBAAgC,WAG9F,cAAC,IAAD,CAAKmE,GAAI,EAAT,SACE,cAAC,IAAD,CACEX,MAAM,QACNR,UAAU,mBACVW,SAAO,EACPG,QAASjD,EAJX,SAMGf,GAAgD,SAA3BE,EAAoC,cAAC,IAAD,yBAAgC,qBAOtG,cAAC,IAAD,CACEwD,MAAM,QACNG,SAAO,EACPX,UAAU,cACTC,MAAO,CAAEW,MAAO,SACjBC,SAAsB,OAAZvD,EACVwD,QAAS,WACPM,OAAOC,KAAK,uEAPhB,0BAYC/D,EACC,mCACE,eAAC,IAAD,CACEkD,MAAM,UACNG,SAAO,EACPX,UAAU,cACVc,QAASlD,EAJX,UAME,mBAAGoC,UAAU,iDAAoD,IANnE,kBAYF,8BACE,eAAC,IAAD,CACEQ,MAAM,OACNG,SAAO,EACPX,UAAU,cACVc,QAASpD,EAJX,UAME,mBAAGsC,UAAU,iDAAoD,IANnE","file":"static/js/5.f05145e4.chunk.js","sourcesContent":["import React, { useState, useContext, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Modal, Button, Form, Spinner } from \"reactstrap\";\nimport { Web3ModalContext } from \"../../contexts/Web3ModalProvider\";\nimport { Web3WrapperContext } from \"../../contexts/Web3WrapperProvider\";\nimport { GetErrorText, BNtoNum } from \"../../blockchain/utils\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure({ autoClose: 4000 });\n\n\nconst Header = () => {\n  const [get_token, setGet_token] = useState(false);\n  const [isTransactionDone, setIsTransactionDone] = useState(false);\n  const [currentProcessingToken, setCurrentProcessingToken] = useState(null);\n\n  const { connect, disconnect, account } = useContext(Web3ModalContext);\n  const { web3Wrapper: wrapper } = useContext(Web3WrapperContext);\n\n\n\n  const handleConnectWallet = useCallback(() => {\n    connect();\n  }, [connect]);\n\n  const handleDisconnectWallet = useCallback(() => {\n    disconnect();\n  }, [disconnect]);\n\n  async function handleGetToken (event: any) {\n    try {\n      setIsTransactionDone(true);\n      const tokenName = event.target.textContent;\n      setCurrentProcessingToken(event.target.textContent);\n      const tx1 = await wrapper?.getFaucetInstance().getTokens(tokenName);\n      const tx = await tx1.wait();\n      onSuccessCallback(tx.events, tokenName);\n    } catch (error) {\n      setIsTransactionDone(false);\n      setCurrentProcessingToken(null);\n      toast.error(`${GetErrorText(error)}`, { position: toast.POSITION.BOTTOM_RIGHT, closeOnClick: true});     \n    }\n  }\n\n\n  \n  const onSuccessCallback = (data, tokenName) => {\n    setIsTransactionDone(false);\n    setCurrentProcessingToken(null);\n    let _amount;\n    data.forEach(e => {\n      if (e.event == \"TokensIssued\") {\n        _amount = e.args.amount.toBigInt()\n      }\n    })\n    const amount = BNtoNum(_amount, 8)\n    toast.success(`${amount} ${tokenName} tokens Received Successfully.`, { position: toast.POSITION.BOTTOM_RIGHT, closeOnClick: true});\n  };\n\n  function removeBodyCss() {\n    document.body.classList.add(\"no_padding\");\n  }\n\n  function tog_token() {\n    setGet_token(!get_token);\n    removeBodyCss();\n  }\n\n  return (\n    <React.Fragment>\n      <header id=\"page-topbar\">\n        <div className=\"navbar-header\" style={{paddingRight: \"2%\"}}>\n          <div className=\"d-flex\">\n            <div className=\"navbar-brand-box\">\n              <Link to=\"\" className=\"logo logo-dark\">\n                <img src=\"./hstkLogo-white.svg\" style={{ width: '30px', height: '30px', marginRight: '0.5rem' }}></img>\n                <span className=\"logo-sm\">\n                  <strong style={{ color: 'white', fontSize: '22px', fontWeight: '600' }}>Hashstack</strong>\n                </span>\n                <span className=\"logo-lg\">\n                  <strong style={{ color: 'white', fontSize: '19px', fontWeight: '600' }}>Hashstack</strong>\n                </span>\n              </Link>\n\n              <Link to=\"\" className=\"logo logo-light\">\n                <img src=\"./hstkLogo-white.svg\" style={{ width: '30px', height: '30px', marginRight: '0.5rem' }}></img>\n                <span className=\"logo-sm\">\n                  <strong style={{ color: 'white', fontSize: '22px', fontWeight: '600' }}>Hashstack</strong>\n                </span>\n                <span className=\"logo-lg\">\n                  <strong style={{ color: 'white', fontSize: '19px', fontWeight: '600' }}>Hashstack</strong>\n                </span>\n              </Link>\n            </div>\n          </div>\n          \n        \n          <div className=\"d-flex flex-wrap gap-4\">\n            <Button\n              color=\"light\"\n              outline\n              className=\"btn-outline\"\n              style={{ float: \"right\" }}\n              disabled={account === null}\n              onClick={() => {\n                tog_token();\n              }}\n            >\n              Get Tokens\n            </Button>\n            <Modal\n              isOpen={get_token}\n              toggle={() => {\n                tog_token();\n              }}\n              centered\n            >\n              <div className=\"modal-body\">\n                <Form>\n                  <h5 style={{ textAlign: \"center\" }}>Get Token</h5>\n                  <hr />\n                  <div className=\"row mb-4\">\n                    <Col sm={3}>\n                      <Button\n                        className=\"btn-block btn-lg\"\n                        color=\"light\"\n                        outline\n                        onClick={handleGetToken}\n                      >\n                        {isTransactionDone && currentProcessingToken === 'BTC' ? <Spinner>Loading...</Spinner> : \"BTC\" }\n                      </Button>\n                    </Col>\n                    <Col sm={3}>\n                      <Button\n                        color=\"light\"\n                        className=\"btn-block btn-lg\"\n                        outline\n                        onClick={handleGetToken}\n                      >\n                        {isTransactionDone && currentProcessingToken === 'BNB' ? <Spinner>Loading...</Spinner> : \"BNB\" }\n                      </Button>\n                    </Col>\n                    <Col sm={3}>\n                      <Button\n                        color=\"light\"\n                        className=\"btn-block btn-lg\"\n                        outline\n                        onClick={handleGetToken}\n                      >\n                        {isTransactionDone && currentProcessingToken === 'USDC' ? <Spinner>Loading...</Spinner> : \"USDC\" }\n                      </Button>\n                    </Col>\n                    <Col sm={3}>\n                      <Button\n                        color=\"light\"\n                        className=\"btn-block btn-lg\"\n                        outline\n                        onClick={handleGetToken}\n                      >\n                        {isTransactionDone && currentProcessingToken === 'USDT' ? <Spinner>Loading...</Spinner> : \"USDT\" }\n                      </Button>\n                    </Col>\n                  </div>\n                </Form>\n              </div>\n            </Modal>\n            <Button\n              color=\"light\"\n              outline\n              className=\"btn-outline\"\n               style={{ float: \"right\" }}\n              disabled={account === null}\n              onClick={() => {\n                window.open(\"https://discord.com/channels/907151419650482217/907151709485277214\");\n              }}\n            >\n              Join Discord\n            </Button>\n            {account ?\n              <>\n                <Button\n                  color=\"success\"\n                  outline\n                  className=\"btn-outline\"\n                  onClick={handleDisconnectWallet}\n                >\n                  <i className=\"fas fa-wallet font-size-16 align-middle me-2\"></i>{\" \"}\n                  Disconnect\n                </Button></>\n\n              :\n\n              <div>\n                <Button\n                  color=\"dark\"\n                  outline\n                  className=\"btn-outline\"\n                  onClick={handleConnectWallet}\n                >\n                  <i className=\"fas fa-wallet font-size-16 align-middle me-2\"></i>{\" \"}\n                  Connect\n                </Button>\n              </div>\n            }\n\n            {/* <div className=\"form-check form-switch\" style={{ margin: \"0\" }}>\n              <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckChecked\" checked />\n              <label className=\"form-check-label\">Dark</label>\n            </div> */}\n          </div>\n\n        </div>\n      </header>\n    </React.Fragment>\n  );\n};\n\nexport default Header;\n"],"sourceRoot":""}