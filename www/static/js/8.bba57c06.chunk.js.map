{"version":3,"sources":["pages/deposit.tsx"],"names":["toast","configure","autoClose","Deposit","props","useState","commitPeriod","setCommitPeriod","modal_deposit","setmodal_deposit","inputVal","setInputVal","isTransactionDone","setIsTransactionDone","useContext","Web3ModalContext","chainId","account","wrapper","Web3WrapperContext","web3Wrapper","balance","setBalance","tog_center","a","document","body","classList","add","getMockBep20Instance","balanceOf","SymbolsMap","asset","getCurrentBalnce","BNtoNum","Number","handleDeposit","approve","marketDataOnChain","DecimalsMap","approveTransactionHash","wait","console","log","_commitPeriod","getDepositInstance","depositRequest","CommitMap","tx1","tx","onDeposit","events","error","GetErrorText","position","POSITION","BOTTOM_RIGHT","closeOnClick","data","_amount","forEach","e","event","args","amount","toBigInt","success","type","className","onClick","isOpen","toggle","centered","sm","align","style","border","MinimumAmount","id","placeholder","onChange","target","value","invalid","outline","disabled","background","borderBottom","hidden","color","undefined","React","memo"],"mappings":"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","file":"static/js/8.bba57c06.chunk.js","sourcesContent":["import { useState, useContext } from \"react\"\nimport { Col, Button, Form, Input, Modal, Spinner, InputGroup, FormText, FormGroup } from \"reactstrap\"\nimport {\n  SymbolsMap,\n  marketDataOnChain,\n  DepositInterestRates,\n  CommitMap,\n  VariableDepositInterestRates,\n  MinimumAmount,\n} from \"../blockchain/constants\"\nimport { Web3ModalContext } from \"../contexts/Web3ModalProvider\"\nimport { Web3WrapperContext } from \"../contexts/Web3WrapperProvider\"\nimport { BNtoNum, GetErrorText, NumToBN } from \"../blockchain/utils\"\nimport { toast } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\nimport React from \"react\"\n\ntoast.configure({\n  autoClose: 4000,\n})\n\nlet Deposit = props => {\n  const [commitPeriod, setCommitPeriod] = useState()\n  const [modal_deposit, setmodal_deposit] = useState(false)\n  const [inputVal, setInputVal] = useState(0)\n  const [isTransactionDone, setIsTransactionDone] = useState(false)\n  const { chainId, account } = useContext(Web3ModalContext)\n  const { web3Wrapper: wrapper } = useContext(Web3WrapperContext)\n  const [balance, setBalance] = useState(null)\n\n  const handleDepositChange = e => {\n    setCommitPeriod(e.target.value)\n  }\n\n  const handleInputChange = e => {\n    setInputVal(Number(e.target.value))\n  }\n\n  function removeBodyCss() {\n    document.body.classList.add(\"no_padding\")\n  }\n\n\n  const tog_center = async () => {\n    setmodal_deposit(!modal_deposit)\n    removeBodyCss()\n    const getCurrentBalnce = await wrapper\n      ?.getMockBep20Instance()\n      .balanceOf(SymbolsMap[props.asset], account)\n    setBalance(BNtoNum(Number(getCurrentBalnce)));\n  }\n\n  const handleMax = () => {\n    if (balance) {\n      setInputVal(balance)\n    }\n  }\n\n  const handleDeposit = async () => {\n    try {\n      setIsTransactionDone(true)\n      const approveTransactionHash = await wrapper\n        ?.getMockBep20Instance() //SymbolsMap[the market name from dropdown]\n        .approve(SymbolsMap[props.asset], inputVal, marketDataOnChain[chainId].DecimalsMap[props.asset])\n      await approveTransactionHash.wait()\n      console.log(\"Approve Transaction sent: \", approveTransactionHash)\n      const _commitPeriod: string | undefined = commitPeriod\n\n      const tx1 = await wrapper\n        ?.getDepositInstance()\n        .depositRequest(\n          SymbolsMap[props.asset],\n          CommitMap[_commitPeriod],\n          inputVal,\n          marketDataOnChain[chainId].DecimalsMap[props.asset]\n        )\n      const tx = await tx1.wait()\n      onDeposit(tx.events)\n    } catch (err) {\n      setIsTransactionDone(false)\n      toast.error(`${GetErrorText(err)}`, { position: toast.POSITION.BOTTOM_RIGHT, closeOnClick: true, })\n    }\n  }\n\n  const onDeposit = data => {\n    let eventName\n    let _amount\n    data.forEach(e => {\n      if (e.event == \"DepositAdded\" || e.event == \"NewDeposit\") {\n        eventName = e.event\n        _amount = e.args.amount.toBigInt()\n      }\n    })\n    setIsTransactionDone(false)\n    let amount = BNtoNum(_amount, 8)\n    toast.success(`Deposited amount: ${amount}`, {\n      position: toast.POSITION.BOTTOM_RIGHT,\n      closeOnClick: true,\n    })\n  }\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"btn btn-dark btn-sm w-xs\"\n        onClick={tog_center}\n      >\n        Deposit\n      </button>\n      <Modal\n        isOpen={modal_deposit}\n        toggle={() => {\n          tog_center()\n        }}\n        centered\n      >\n        <div className=\"modal-body\">\n          {account ? (\n            <Form>\n              <div className=\"row mb-4\">\n                <Col sm={8}>\n                  <h5> {props.asset}</h5>\n                </Col>\n                {/* <Col sm={4}></Col> */}\n                <Col sm={4} >\n                  <div align=\"right\">Balance : {balance ? balance : \" Loading\"}</div>\n                </Col>\n\n              </div>\n              <FormGroup>\n                <div className=\"row mb-4\">\n                  <Col sm={12}>\n                    <InputGroup style={{\n                      border: inputVal == 0 || inputVal >= MinimumAmount[props.asset] ? '1px solid #556EE6' : \"\"\n                    }}>\n                      <Input\n                        type=\"number\"\n                        className=\"form-control\"\n                        id=\"amount\"\n                        placeholder={`Minimum amount = ${MinimumAmount[props.asset]\n                          }`}\n                        onChange={handleInputChange}\n                        value={inputVal !== 0 ? inputVal : `Minimum amount = ${MinimumAmount[props.asset]\n                          }`}\n                        invalid={inputVal !== 0 && inputVal < MinimumAmount[props.asset] ? true : false}\n                      />\n\n\n                      {<Button\n                        outline\n                        type=\"button\"\n                        className=\"btn btn-md w-xs\"\n                        onClick={handleMax}\n                        disabled={balance ? false : true}\n                        style={{ background: \"#2e3444\", border: \"#2e3444\" }}\n                      >\n                        <span style={{ borderBottom: \"2px dotted #fff\" }}>Max</span>\n                      </Button>\n                      }\n                    </InputGroup>\n                    {\n                      inputVal != 0 && inputVal < MinimumAmount[props.asset] && <FormText>\n                        {`Please enter amount more than minimum amount = ${MinimumAmount[props.asset]}`}\n                      </FormText>\n                    }\n                  </Col>\n                </div>\n              </FormGroup>\n              <div className=\"row mb-4\">\n                <Col sm={12}>\n                  <select\n                    className=\"form-select\"\n                    placeholder=\"Commitment\"\n                    onChange={handleDepositChange}\n                  >\n                    <option hidden>Commitment</option>\n                    <option value={\"NONE\"}>None</option>\n                    <option value={\"TWOWEEKS\"}>Two Weeks</option>\n                    <option value={\"ONEMONTH\"}>One Month</option>\n                    <option value={\"THREEMONTHS\"}>Three Months</option>\n                  </select>\n                </Col>\n              </div>\n              {/* <div className=\"row mb-4\">\n                <Col sm={6}>\n                  <p>\n                    Fixed APY{\" \"}\n                    <strong>\n                      {DepositInterestRates[commitPeriod || \"NONE\"] || \"7.8%\"}\n                    </strong>\n                  </p>\n                </Col>\n                <Col sm={6}>\n                  <p style={{ float: \"right\" }}>\n                    Variable APY{\" \"}\n                    <strong>\n                      {VariableDepositInterestRates[commitPeriod || \"NONE\"] ||\n                        \"0%\"}\n                    </strong>\n                  </p>\n                </Col>\n              </div> */}\n              <div className=\"d-grid gap-2\">\n                <Button\n                  color=\"primary\"\n                  className=\"w-md\"\n                  disabled={commitPeriod === undefined || isTransactionDone || inputVal < MinimumAmount[props.asset]}\n                  onClick={handleDeposit}\n                >\n                  {!isTransactionDone ? (\n                    \"Deposit\"\n                  ) : (\n                    <Spinner>Loading...</Spinner>\n                  )}\n                </Button>\n              </div>\n            </Form>\n          ) : (\n            <h2>Please connect your wallet</h2>\n          )}\n        </div>\n      </Modal>\n    </>\n  )\n}\n\nexport default Deposit = React.memo(Deposit);\n"],"sourceRoot":""}